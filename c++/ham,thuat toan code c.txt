//ham so
int prime(int n){
	for(int i=2;i<=sqrt(n);i++){
		if(n%i==0) return 0;		
	}
	return n>=2;
}
long long factorial(int n){
	long long gt=1;
	for(int i=1;i<=n;i++){
		gt*=i;
	}
	return gt;
}
void swap(int *a, int *b){
	int t;
	t = *a;
	*a = *b;
	*b = t;
}
int cp(int n){
	if((int)sqrt(n) == sqrt(n)) return 1;
	else return 0;
}
long long f[100];
void fib() {
	f[0]=0,f[1]=1;
	for(int i=2;i<=92;i++){
		f[i] = f[i-1] + f[i-2];
	}
}
int isfib(long long n) {
	for(int i=0;i<=92;i++){
		if(f[i]==n) return 1;
	}
	return 0;
}
int ucln(int a,int b){
	while(b!=0){
		int r = a%b;
		a=b;
		b=r;
	}
	return a;
}
int bcnn(int a,int b){
	return a*b / ucln(a,b);
}
bool perfect(11 n){
	11 tong = 0;
	for(int i = 1; i <= sqrt(n); i++){
		if(n % i == 0){
			tong += i;
			if(i != n / i){
				tong += n / i;



				}

	if(n == tong - n)
	return true;
	else
	return false;
}
//thuat toan sap xep
void selecsort(int a[],int n){
	for(int i=0;i<n-1;i++){
		int min = i;
		for(int j=i+1;j<n;j++){
			if(a[j] < a[min]){
				min = j;
			}
		}
		swap(&a[i],&a[min]);
	}
}
void bubble(int a[],int n){
	for(int i=0;i<n;i++){
		for(int j=0;j<n-1-i;j++){
			if(a[j]>a[j+1]){
				int t=a[j];
				a[j] = a[j+1];
				a[j+1] = t;
			}
		}
	}
}
void insertion(int a[],int n){
	for(int i=1;i<n;i++){
		int pos=i-1,val=a[i];
		while(pos>=0 && val<a[pos]){
			a[pos+1] = a[pos];
			--pos;
		}
		a[pos+1] = val;
	}
}
int cnt[10000001];
void counting(int a[],int n){
	int k=-1e9;
	for(int i=0;i<n;i++){
		k = fmax(k,a[i]);
	}
	for(int i=0;i<n;i++){
		cnt[a[i]]++;
	}
	for(int i=0;i<=k;i++){
		for(int j=0;j<cnt[i];j++){
			printf("%d ",i);
		}
	}
}
//phan hoach mang: tra ve gia tri pivot
int partition(int a[],int l,int r){
    int i=l-1;
    int pivot = a[r];
    for(int j=l;j<r;j++){
        //neu a[j]>pivot thi bo qua
        if(a[j]<=a[r]){
            //dua a[j] len dau
            i++;
            swap(a[j],a[i]);
        }
    }
    i++;
    swap(a[i],a[r]);
    return i;
}
void quicksort(int a[],int l,int r){
    if(l<r){
        int pos = partition(a,l,r);
        //de quy 2 phia
        quicksort(a,l,pos-1);
        quicksort(a,pos+1,r);
    }
}
//mergesort
//merge,tron cac phan tu chi so l->mid,mid+1->r thanh day tang dan
void merge(int a[],int l,int m,int r){
	//luu phan tu l->m,m+1->r thanh 2 mang
	int n1=m-l+1,n2=r-m;
	int x[n1],y[n2];
	for(int i=0;i<n1;i++){
		x[i] = a[l+i];
	}
	for(int i=0;i<n2;i++){
		y[i] = a[m+1+i];
	}
	//tron 2 mang x,y roi gan lai cho mang a[l,r]
	int idx=l;
	int i=0,j=0;
	while(i<n1&&j<n2){
		if(x[i]<=y[j])
			a[idx++] = x[i++];
		else
			a[idx++] = y[j++];
	}
	while(i<n1) 
		a[idx++] = x[i++];
	while(j<n2) 
		a[idx++] = y[j++];
	
}
void mergesort(int a[],int l,int r){
	if(l<r){
		int m = (l+r)/2;
		mergesort(a,l,m); //de quy nua trai
		mergesort(a,m+1,r); //de quy nua phai
		merge(a,l,m,r);
	}
}
int tonguoc(int n){
	int sum=0;
	for(int i=1;i<=sqrt(n);i++){
		if(n%i==0){
			sum += i;
			if(n/i != i){
				sum += n/i;
			}
		}
	}
	return sum;
}
int perfectnum(int n){
	int sum=0;
	for(int i=1;i<=sqrt(n);i++){
		if(n%i==0){
			sum += i;
			if(i != n/i) sum += n/i;
		}
	}
	if(sum - n == n) return 1;
	else return 0;
}
void fact(int n){
	for(int i=2;i<=sqrt(n);i++){
		if(n%i==0){
			while(n%i==0){
				printf("%d ",i);
				n/=i;
			}
			
		}
	}
	if(n!=1) printf("%d ",n);
}
//ham luy thua O(N)
long long luythua(int a,int b){
	ll res=1;
	for(int i=1;i<=b;i++){
		res *= a;
	}
	return res;
}
//ham ve luy thua nhi phan O(logN)
ll luythua2(int a,int b){
	ll res=1;
	while(b){
		if(b%2 != 0){
			res *=a;
		}
		a*=a;
		b/=2;
	}
	return res;
}
//sang so nguyen to
int n = 10000000;
int prime[10000001];
void eratosthenes(){
	for(int i=0;i<=n;i++){
		prime[i] = 1;
	}
	prime[0] = prime[1] = 0;
	for(int i=2;i<=sqrt(n);i++){
		if(prime[i]==1){
			for(int j=i*i;j<=n;j+=i){
				prime[j] = 0;
			}
		}
	} 
}
//thuat toan tim kiem tuyen tinh O(n)
int linear(int a[],int n,int x){
	for(int i=0;i<n;i++){
		if(a[i]==x){
			return 1;
		}
	}
	return 0;
}
//thuat toan tim kiem nhi phan o(log(n)) dùng khi dãy đã đc sắp xếp tăng dần
int binsearch(int a[],int n,int x){
	int l=0,r=n-1;
	while(l<=r){
		int mid=(l+r) / 2;
		if(a[mid]==x) return 1;
		else if(a[mid]<x){
			l=mid+1;
		}else if(a[mid]>x){
			r=mid-1;
		}
	}
	return 0;
}
//cap phat dong
int *a = (int *) malloc(1000000 * sizeof(int));
//xay dung comparator va qsort
int comparator(const void *a,const void *b){
	int *x = (int*)a;
	int *y = (int*)b;
	return *x - *y;
}
qsort(a,n,sizeof(int),comparator);
//cac ham xau ky tu

strlen(char c) :để biết số lượng kí tự trong mảng thực sự được lưu là bao nhiêu
isdigit(char c) :Kiểm tra chữ số
islower(char c) :Kiểm tra chữ in thường
isupper(char c) :Kiểm tra in hoa
isalpha(char c) :Kiểm tra chữ cái
int tolower(char c) :Chuyển thành chữ in thường
int toupper(char c) :Chuyển thành chữ in hoa

strlwr() :Chuyển xâu kí tự về dạng in thường
strupr() :Chuyển xâu kí tự về dạng in hoa
strcmp() :Hàm này dùng để so sánh 2 xâu theo thứ tự từ điển
strcat() :Nối xâu nguồn vào xâu đích
strcpy() :Copy nội dung từ xâu nguồn vào xâu đích, chú ý rằng trước
khi copy, toàn bộ nội dung của xâu đích sẽ bị xóa hết
strrev() "Lật ngược xâu c
strstr() :kiểm tra sự tồn tại của xâu con Trả về con trỏ tới vị trí xuất hiện đầu tiên của xâu d trong xâu c, nếu xâu d không xuất hiện
trong xâu c nó trả về con trỏ NULL
memset(a, 0hoặc1, sizeof(a)) :gán giá trị cho các ô nhớ, các bạn có thể dùng hàm này để gán giá trị 0 hoặc -1 cho mảng int

atoi() cho int atoll() cho long long :chuyển đổi các xâu kí tự sang số tương ứng
strtok() :Hàm strtok có chức năng tách các từ trong xâu theo một kí tự chỉ đinh cho trước

//file:

FILE *f;
//Mở file
f = fopen("fileName", "mode");
//Đóng file
fclose(f);

r : Mở file để đọc, nếu file chưa tồn tại sẽ báo lỗi
w : Mở file để ghi, nếu file chưa tồn tại nó sẽ tạo một file mới, ngược lại nó sẽ xóa hết
nội dung của file trước khi ghi mới nội dung
a : Mở file để ghi, nếu file chưa tồn tại nó sẽ tạo file mới, ngược lại nó sẽ ghi tiếp vào
cuối file, nội dung ban đầu của file được giữa nguyên
//ham ghi:

fputc(char, file_pointer): Ghi 1 kí tự vào file thông qua con trỏ file.
fputs(str, file_pointer): Ghi 1 xâu kí tự vào file thông qua con trỏ file.
fprintf(file_pointer, format, variables): Tương tự hàm printf nhưng ghi
vào file thông qua con trỏ file.

//ham doc:

fgetc(file_pointer) : Đọc 1 kí tự từ file, nếu tới cuối file và không đọc được nữa
thì hàm này trả về EOF.(dùng để xóa kí tự enter)
fscanf(file_pointer, format, variables) : Tương tự như hàm scanf khi đọc từ
bàn phím, nếu tới cuối file và không đọc được nữa thì hàm này trả về -1.
fgets(buffer, size, file_pointer) : Tương tự như hàm gets, được dùng để đọc
cả 1 dòng trong file, nếu tới cuối file và không đọc được nữa thì hàm này trả về NULL.

//ham fseek,ftell:

int fseek(FILE *pointer, long int offset, int position)
• pointer: con trỏ file
• offset: số lượng byte di chuyển
• position: vị trí bắt đầu di chuyển

Các vị trí bắt đầu cho con trỏ file:
• SEEK_END : Bắt đầu từ cuối file
• SEEK_SET : Bắt đầu từ đầu file
• SEEK_CUR : Bắt đầu từ vị trí hiện tại

ftell(FILE *pointer) : Hàm ftell được sử dụng để chỉ ra vị trí của con trỏ file hiện tại, được
tính bằng số byte từ đầu file từ vị trí hiện tại của con trỏ file.
